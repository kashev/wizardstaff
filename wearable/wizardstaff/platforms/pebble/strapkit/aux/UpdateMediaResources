#!/usr/bin/env python
import re
import sys
import json
import subprocess

#TODO: recursively add meadia resources.
#TODO: add support for font type detection. eg: .ttf is of type font
#TODO: remove media from appinfo if not present in dir

# code.py path/to/appinfo.json path/to/images path/to/fonts
# Adds objects with the following structure to appinfo.json['resources']['media']
# {
# 	"type": "png",
# 	"name": "IMAGE_TILE_SPLASH",
# 	"file": "images/tile_splash.png"
# }

def read_appinfo(appInfoFile):
	appInfo = {}
	with open(appInfoFile,'r') as infile:
		appInfo = json.load(infile)
	return appInfo

def write_appinfo(appInfoFile,appInfo):
	with open(appInfoFile,'w') as outfile:
		# json.dump(appInfo,outfile)
		prettyAppInfo = json.dumps(appInfo, sort_keys=True, indent=4, separators=(',', ': '))
		outfile.write(prettyAppInfo)		

def dedup(appInfo,fileEntries):
	media = {}
	appInfoMedia = appInfo['resources']['media']
	for item in appInfoMedia:
		media[item['name']] = item
	
	newMedia = {}
	for item in fileEntries:
		newMedia[item['name']] = item

	deduped = []
	for key in newMedia:
		if key not in media.keys():
			deduped.append(newMedia[key])
	return deduped

def write_media_to_appinfo(fileEntries,appInfoFile):
	appInfo = read_appinfo(appInfoFile)
	uniqFileEntries = dedup(appInfo,fileEntries)
	for fileEntry in uniqFileEntries:
		appInfo['resources']['media'].append(fileEntry)
	write_appinfo(appInfoFile,appInfo)
	return appInfo

def read_media_from_disk(dirs):
	fileEntries = []
	for folder in dirs:
		dirContents = subprocess.check_output(['ls',folder])
		if dirContents:
			files = dirContents.split()
			for fileName in files:
				ext = ''
				match = re.search(r'(.+?)\.(\w+?$)',fileName)
				if match:
					fileName = match.group(1)
					ext = match.group(2)

				pathMatch = re.search(r'resources/(\w+)(.+?$)',folder)
				partialRelPath = ''
				if pathMatch:
					if 'font' == pathMatch.group(1):
						continue
					partialRelPath = pathMatch.group(1) + pathMatch.group(2)
				if 'tile_splash' == fileName:
					continue
				path = partialRelPath.rstrip('/') + '/' + fileName + '.' + ext
				# SuppliedPath = folder+'/'+fileName
				# path = subprocess.check_output(['readlink','-f',SuppliedPath]).rstrip()

				cleanFileName =  re.sub(r'-','_',fileName.upper())
				
				fileEntry = {"type": ext, "name": cleanFileName, "file": path}
				fileEntries.append(fileEntry)
	return fileEntries

if '__main__' == __name__:
	appInfoFile = sys.argv[1]
	imagesFile = sys.argv[2]
	fontsFile = sys.argv[3]

	fileEntries = read_media_from_disk([imagesFile,fontsFile])
	write_media_to_appinfo(fileEntries,appInfoFile)